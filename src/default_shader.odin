package main
import sg "../vendor/sokol/gfx"
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i src/shader.glsl -o src/default_shader.odin -l hlsl5:glsl300es -f sokol_odin

    Overview:
    =========
    Shader program: 'quad':
        Get shader desc: quad_shader_desc(sg.query_backend())
        Vertex Shader: vs
        Fragment Shader: fs
        Attributes:
            ATTR_quad_position => 0
            ATTR_quad_color0 => 1
            ATTR_quad_uv0 => 2
            ATTR_quad_tex_id => 3
            ATTR_quad_flash_amount => 4
    Bindings:
        Image 'tex0':
            Image type: ._2D
            Sample type: .FLOAT
            Multisampled: false
            Bind slot: IMG_tex0 => 0
        Image 'tex1':
            Image type: ._2D
            Sample type: .FLOAT
            Multisampled: false
            Bind slot: IMG_tex1 => 1
        Sampler 'default_sampler':
            Type: .FILTERING
            Bind slot: SMP_default_sampler => 0
        Image Sampler Pair 'tex0_default_sampler':
            Image: tex0
            Sampler: default_sampler
        Image Sampler Pair 'tex1_default_sampler':
            Image: tex1
            Sampler: default_sampler
*/
ATTR_quad_position :: 0
ATTR_quad_color0 :: 1
ATTR_quad_uv0 :: 2
ATTR_quad_tex_id :: 3
ATTR_quad_flash_amount :: 4
IMG_tex0 :: 0
IMG_tex1 :: 1
SMP_default_sampler :: 0
/*
    #version 300 es

    layout(location = 0) in vec2 position;
    out vec4 color;
    layout(location = 1) in vec4 color0;
    out vec2 uv;
    layout(location = 2) in vec2 uv0;
    out float v_tex_id;
    layout(location = 3) in float tex_id;
    out float v_flash_amount;
    layout(location = 4) in float flash_amount;

    void main()
    {
        gl_Position = vec4(position, 0.0, 1.0);
        color = color0;
        uv = uv0;
        v_tex_id = tex_id;
        v_flash_amount = flash_amount;
    }

*/
@(private)
vs_source_glsl300es := [439]u8 {
	0x23,
	0x76,
	0x65,
	0x72,
	0x73,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x33,
	0x30,
	0x30,
	0x20,
	0x65,
	0x73,
	0x0a,
	0x0a,
	0x6c,
	0x61,
	0x79,
	0x6f,
	0x75,
	0x74,
	0x28,
	0x6c,
	0x6f,
	0x63,
	0x61,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x3d,
	0x20,
	0x30,
	0x29,
	0x20,
	0x69,
	0x6e,
	0x20,
	0x76,
	0x65,
	0x63,
	0x32,
	0x20,
	0x70,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x3b,
	0x0a,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x76,
	0x65,
	0x63,
	0x34,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x3b,
	0x0a,
	0x6c,
	0x61,
	0x79,
	0x6f,
	0x75,
	0x74,
	0x28,
	0x6c,
	0x6f,
	0x63,
	0x61,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x3d,
	0x20,
	0x31,
	0x29,
	0x20,
	0x69,
	0x6e,
	0x20,
	0x76,
	0x65,
	0x63,
	0x34,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x30,
	0x3b,
	0x0a,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x76,
	0x65,
	0x63,
	0x32,
	0x20,
	0x75,
	0x76,
	0x3b,
	0x0a,
	0x6c,
	0x61,
	0x79,
	0x6f,
	0x75,
	0x74,
	0x28,
	0x6c,
	0x6f,
	0x63,
	0x61,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x3d,
	0x20,
	0x32,
	0x29,
	0x20,
	0x69,
	0x6e,
	0x20,
	0x76,
	0x65,
	0x63,
	0x32,
	0x20,
	0x75,
	0x76,
	0x30,
	0x3b,
	0x0a,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x3b,
	0x0a,
	0x6c,
	0x61,
	0x79,
	0x6f,
	0x75,
	0x74,
	0x28,
	0x6c,
	0x6f,
	0x63,
	0x61,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x3d,
	0x20,
	0x33,
	0x29,
	0x20,
	0x69,
	0x6e,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x3b,
	0x0a,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x3b,
	0x0a,
	0x6c,
	0x61,
	0x79,
	0x6f,
	0x75,
	0x74,
	0x28,
	0x6c,
	0x6f,
	0x63,
	0x61,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x3d,
	0x20,
	0x34,
	0x29,
	0x20,
	0x69,
	0x6e,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x3b,
	0x0a,
	0x0a,
	0x76,
	0x6f,
	0x69,
	0x64,
	0x20,
	0x6d,
	0x61,
	0x69,
	0x6e,
	0x28,
	0x29,
	0x0a,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x67,
	0x6c,
	0x5f,
	0x50,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x3d,
	0x20,
	0x76,
	0x65,
	0x63,
	0x34,
	0x28,
	0x70,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x2c,
	0x20,
	0x30,
	0x2e,
	0x30,
	0x2c,
	0x20,
	0x31,
	0x2e,
	0x30,
	0x29,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x20,
	0x3d,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x30,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x75,
	0x76,
	0x20,
	0x3d,
	0x20,
	0x75,
	0x76,
	0x30,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x20,
	0x3d,
	0x20,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x3b,
	0x0a,
	0x7d,
	0x0a,
	0x0a,
	0x00,
}
/*
    #version 300 es
    precision mediump float;
    precision highp int;

    uniform highp sampler2D tex0_default_sampler;
    uniform highp sampler2D tex1_default_sampler;

    in highp float v_tex_id;
    in highp vec2 uv;
    in highp float v_flash_amount;
    layout(location = 0) out highp vec4 col_out;
    in highp vec4 color;

    void main()
    {
        highp vec4 tex_col = vec4(1.0);
        if (((0.5 > v_tex_id) ? 0 : 1) == 0)
        {
            tex_col = texture(tex0_default_sampler, uv);
            bool _45 = v_flash_amount == 1.0;
            bool _55;
            if (_45)
            {
                _55 = tex_col.w > 0.0;
            }
            else
            {
                _55 = _45;
            }
            bool _62;
            if (_55)
            {
                _62 = tex_col.w != 0.3529411852359771728515625;
            }
            else
            {
                _62 = _55;
            }
            if (_62)
            {
                col_out = vec4(1.0);
            }
            else
            {
                col_out = tex_col;
                col_out *= color;
            }
        }
        else
        {
            highp vec4 _92 = tex_col;
            _92.w = texture(tex1_default_sampler, uv).x;
            tex_col = _92;
            col_out = _92;
            col_out *= color;
        }
    }

*/
@(private)
fs_source_glsl300es := [1160]u8 {
	0x23,
	0x76,
	0x65,
	0x72,
	0x73,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x33,
	0x30,
	0x30,
	0x20,
	0x65,
	0x73,
	0x0a,
	0x70,
	0x72,
	0x65,
	0x63,
	0x69,
	0x73,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x6d,
	0x65,
	0x64,
	0x69,
	0x75,
	0x6d,
	0x70,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x3b,
	0x0a,
	0x70,
	0x72,
	0x65,
	0x63,
	0x69,
	0x73,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x68,
	0x69,
	0x67,
	0x68,
	0x70,
	0x20,
	0x69,
	0x6e,
	0x74,
	0x3b,
	0x0a,
	0x0a,
	0x75,
	0x6e,
	0x69,
	0x66,
	0x6f,
	0x72,
	0x6d,
	0x20,
	0x68,
	0x69,
	0x67,
	0x68,
	0x70,
	0x20,
	0x73,
	0x61,
	0x6d,
	0x70,
	0x6c,
	0x65,
	0x72,
	0x32,
	0x44,
	0x20,
	0x74,
	0x65,
	0x78,
	0x30,
	0x5f,
	0x64,
	0x65,
	0x66,
	0x61,
	0x75,
	0x6c,
	0x74,
	0x5f,
	0x73,
	0x61,
	0x6d,
	0x70,
	0x6c,
	0x65,
	0x72,
	0x3b,
	0x0a,
	0x75,
	0x6e,
	0x69,
	0x66,
	0x6f,
	0x72,
	0x6d,
	0x20,
	0x68,
	0x69,
	0x67,
	0x68,
	0x70,
	0x20,
	0x73,
	0x61,
	0x6d,
	0x70,
	0x6c,
	0x65,
	0x72,
	0x32,
	0x44,
	0x20,
	0x74,
	0x65,
	0x78,
	0x31,
	0x5f,
	0x64,
	0x65,
	0x66,
	0x61,
	0x75,
	0x6c,
	0x74,
	0x5f,
	0x73,
	0x61,
	0x6d,
	0x70,
	0x6c,
	0x65,
	0x72,
	0x3b,
	0x0a,
	0x0a,
	0x69,
	0x6e,
	0x20,
	0x68,
	0x69,
	0x67,
	0x68,
	0x70,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x3b,
	0x0a,
	0x69,
	0x6e,
	0x20,
	0x68,
	0x69,
	0x67,
	0x68,
	0x70,
	0x20,
	0x76,
	0x65,
	0x63,
	0x32,
	0x20,
	0x75,
	0x76,
	0x3b,
	0x0a,
	0x69,
	0x6e,
	0x20,
	0x68,
	0x69,
	0x67,
	0x68,
	0x70,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x3b,
	0x0a,
	0x6c,
	0x61,
	0x79,
	0x6f,
	0x75,
	0x74,
	0x28,
	0x6c,
	0x6f,
	0x63,
	0x61,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x3d,
	0x20,
	0x30,
	0x29,
	0x20,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x68,
	0x69,
	0x67,
	0x68,
	0x70,
	0x20,
	0x76,
	0x65,
	0x63,
	0x34,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x3b,
	0x0a,
	0x69,
	0x6e,
	0x20,
	0x68,
	0x69,
	0x67,
	0x68,
	0x70,
	0x20,
	0x76,
	0x65,
	0x63,
	0x34,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x3b,
	0x0a,
	0x0a,
	0x76,
	0x6f,
	0x69,
	0x64,
	0x20,
	0x6d,
	0x61,
	0x69,
	0x6e,
	0x28,
	0x29,
	0x0a,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x68,
	0x69,
	0x67,
	0x68,
	0x70,
	0x20,
	0x76,
	0x65,
	0x63,
	0x34,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x20,
	0x3d,
	0x20,
	0x76,
	0x65,
	0x63,
	0x34,
	0x28,
	0x31,
	0x2e,
	0x30,
	0x29,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x69,
	0x66,
	0x20,
	0x28,
	0x28,
	0x28,
	0x30,
	0x2e,
	0x35,
	0x20,
	0x3e,
	0x20,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x29,
	0x20,
	0x3f,
	0x20,
	0x30,
	0x20,
	0x3a,
	0x20,
	0x31,
	0x29,
	0x20,
	0x3d,
	0x3d,
	0x20,
	0x30,
	0x29,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x74,
	0x75,
	0x72,
	0x65,
	0x28,
	0x74,
	0x65,
	0x78,
	0x30,
	0x5f,
	0x64,
	0x65,
	0x66,
	0x61,
	0x75,
	0x6c,
	0x74,
	0x5f,
	0x73,
	0x61,
	0x6d,
	0x70,
	0x6c,
	0x65,
	0x72,
	0x2c,
	0x20,
	0x75,
	0x76,
	0x29,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x62,
	0x6f,
	0x6f,
	0x6c,
	0x20,
	0x5f,
	0x34,
	0x35,
	0x20,
	0x3d,
	0x20,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x20,
	0x3d,
	0x3d,
	0x20,
	0x31,
	0x2e,
	0x30,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x62,
	0x6f,
	0x6f,
	0x6c,
	0x20,
	0x5f,
	0x35,
	0x35,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x69,
	0x66,
	0x20,
	0x28,
	0x5f,
	0x34,
	0x35,
	0x29,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x5f,
	0x35,
	0x35,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x2e,
	0x77,
	0x20,
	0x3e,
	0x20,
	0x30,
	0x2e,
	0x30,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x65,
	0x6c,
	0x73,
	0x65,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x5f,
	0x35,
	0x35,
	0x20,
	0x3d,
	0x20,
	0x5f,
	0x34,
	0x35,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x62,
	0x6f,
	0x6f,
	0x6c,
	0x20,
	0x5f,
	0x36,
	0x32,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x69,
	0x66,
	0x20,
	0x28,
	0x5f,
	0x35,
	0x35,
	0x29,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x5f,
	0x36,
	0x32,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x2e,
	0x77,
	0x20,
	0x21,
	0x3d,
	0x20,
	0x30,
	0x2e,
	0x33,
	0x35,
	0x32,
	0x39,
	0x34,
	0x31,
	0x31,
	0x38,
	0x35,
	0x32,
	0x33,
	0x35,
	0x39,
	0x37,
	0x37,
	0x31,
	0x37,
	0x32,
	0x38,
	0x35,
	0x31,
	0x35,
	0x36,
	0x32,
	0x35,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x65,
	0x6c,
	0x73,
	0x65,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x5f,
	0x36,
	0x32,
	0x20,
	0x3d,
	0x20,
	0x5f,
	0x35,
	0x35,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x69,
	0x66,
	0x20,
	0x28,
	0x5f,
	0x36,
	0x32,
	0x29,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x3d,
	0x20,
	0x76,
	0x65,
	0x63,
	0x34,
	0x28,
	0x31,
	0x2e,
	0x30,
	0x29,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x65,
	0x6c,
	0x73,
	0x65,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x2a,
	0x3d,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x65,
	0x6c,
	0x73,
	0x65,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x68,
	0x69,
	0x67,
	0x68,
	0x70,
	0x20,
	0x76,
	0x65,
	0x63,
	0x34,
	0x20,
	0x5f,
	0x39,
	0x32,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x5f,
	0x39,
	0x32,
	0x2e,
	0x77,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x74,
	0x75,
	0x72,
	0x65,
	0x28,
	0x74,
	0x65,
	0x78,
	0x31,
	0x5f,
	0x64,
	0x65,
	0x66,
	0x61,
	0x75,
	0x6c,
	0x74,
	0x5f,
	0x73,
	0x61,
	0x6d,
	0x70,
	0x6c,
	0x65,
	0x72,
	0x2c,
	0x20,
	0x75,
	0x76,
	0x29,
	0x2e,
	0x78,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x20,
	0x3d,
	0x20,
	0x5f,
	0x39,
	0x32,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x3d,
	0x20,
	0x5f,
	0x39,
	0x32,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x2a,
	0x3d,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x7d,
	0x0a,
	0x0a,
	0x00,
}
/*
    static float4 gl_Position;
    static float2 position;
    static float4 color;
    static float4 color0;
    static float2 uv;
    static float2 uv0;
    static float v_tex_id;
    static float tex_id;
    static float v_flash_amount;
    static float flash_amount;

    struct SPIRV_Cross_Input
    {
        float2 position : TEXCOORD0;
        float4 color0 : TEXCOORD1;
        float2 uv0 : TEXCOORD2;
        float tex_id : TEXCOORD3;
        float flash_amount : TEXCOORD4;
    };

    struct SPIRV_Cross_Output
    {
        float4 color : TEXCOORD0;
        float2 uv : TEXCOORD1;
        float v_tex_id : TEXCOORD2;
        float v_flash_amount : TEXCOORD3;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        gl_Position = float4(position, 0.0f, 1.0f);
        color = color0;
        uv = uv0;
        v_tex_id = tex_id;
        v_flash_amount = flash_amount;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        position = stage_input.position;
        color0 = stage_input.color0;
        uv0 = stage_input.uv0;
        tex_id = stage_input.tex_id;
        flash_amount = stage_input.flash_amount;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.color = color;
        stage_output.uv = uv;
        stage_output.v_tex_id = v_tex_id;
        stage_output.v_flash_amount = v_flash_amount;
        return stage_output;
    }
*/
@(private)
vs_source_hlsl5 := [1284]u8 {
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x20,
	0x67,
	0x6c,
	0x5f,
	0x50,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x32,
	0x20,
	0x70,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x30,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x32,
	0x20,
	0x75,
	0x76,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x32,
	0x20,
	0x75,
	0x76,
	0x30,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x3b,
	0x0a,
	0x0a,
	0x73,
	0x74,
	0x72,
	0x75,
	0x63,
	0x74,
	0x20,
	0x53,
	0x50,
	0x49,
	0x52,
	0x56,
	0x5f,
	0x43,
	0x72,
	0x6f,
	0x73,
	0x73,
	0x5f,
	0x49,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x0a,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x32,
	0x20,
	0x70,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x30,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x30,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x31,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x32,
	0x20,
	0x75,
	0x76,
	0x30,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x32,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x33,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x34,
	0x3b,
	0x0a,
	0x7d,
	0x3b,
	0x0a,
	0x0a,
	0x73,
	0x74,
	0x72,
	0x75,
	0x63,
	0x74,
	0x20,
	0x53,
	0x50,
	0x49,
	0x52,
	0x56,
	0x5f,
	0x43,
	0x72,
	0x6f,
	0x73,
	0x73,
	0x5f,
	0x4f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x0a,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x30,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x32,
	0x20,
	0x75,
	0x76,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x31,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x32,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x33,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x20,
	0x67,
	0x6c,
	0x5f,
	0x50,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x3a,
	0x20,
	0x53,
	0x56,
	0x5f,
	0x50,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x3b,
	0x0a,
	0x7d,
	0x3b,
	0x0a,
	0x0a,
	0x76,
	0x6f,
	0x69,
	0x64,
	0x20,
	0x76,
	0x65,
	0x72,
	0x74,
	0x5f,
	0x6d,
	0x61,
	0x69,
	0x6e,
	0x28,
	0x29,
	0x0a,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x67,
	0x6c,
	0x5f,
	0x50,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x3d,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x28,
	0x70,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x2c,
	0x20,
	0x30,
	0x2e,
	0x30,
	0x66,
	0x2c,
	0x20,
	0x31,
	0x2e,
	0x30,
	0x66,
	0x29,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x20,
	0x3d,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x30,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x75,
	0x76,
	0x20,
	0x3d,
	0x20,
	0x75,
	0x76,
	0x30,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x20,
	0x3d,
	0x20,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x3b,
	0x0a,
	0x7d,
	0x0a,
	0x0a,
	0x53,
	0x50,
	0x49,
	0x52,
	0x56,
	0x5f,
	0x43,
	0x72,
	0x6f,
	0x73,
	0x73,
	0x5f,
	0x4f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x20,
	0x6d,
	0x61,
	0x69,
	0x6e,
	0x28,
	0x53,
	0x50,
	0x49,
	0x52,
	0x56,
	0x5f,
	0x43,
	0x72,
	0x6f,
	0x73,
	0x73,
	0x5f,
	0x49,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x69,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x29,
	0x0a,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x70,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x3d,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x69,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x70,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x30,
	0x20,
	0x3d,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x69,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x30,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x75,
	0x76,
	0x30,
	0x20,
	0x3d,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x69,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x75,
	0x76,
	0x30,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x20,
	0x3d,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x69,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x20,
	0x3d,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x69,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x76,
	0x65,
	0x72,
	0x74,
	0x5f,
	0x6d,
	0x61,
	0x69,
	0x6e,
	0x28,
	0x29,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x53,
	0x50,
	0x49,
	0x52,
	0x56,
	0x5f,
	0x43,
	0x72,
	0x6f,
	0x73,
	0x73,
	0x5f,
	0x4f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x67,
	0x6c,
	0x5f,
	0x50,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x20,
	0x3d,
	0x20,
	0x67,
	0x6c,
	0x5f,
	0x50,
	0x6f,
	0x73,
	0x69,
	0x74,
	0x69,
	0x6f,
	0x6e,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x20,
	0x3d,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x75,
	0x76,
	0x20,
	0x3d,
	0x20,
	0x75,
	0x76,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x20,
	0x3d,
	0x20,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x20,
	0x3d,
	0x20,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x72,
	0x65,
	0x74,
	0x75,
	0x72,
	0x6e,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x3b,
	0x0a,
	0x7d,
	0x0a,
	0x00,
}
/*
    Texture2D<float4> tex0 : register(t0);
    SamplerState default_sampler : register(s0);
    Texture2D<float4> tex1 : register(t1);

    static float v_tex_id;
    static float2 uv;
    static float v_flash_amount;
    static float4 col_out;
    static float4 color;

    struct SPIRV_Cross_Input
    {
        float4 color : TEXCOORD0;
        float2 uv : TEXCOORD1;
        float v_tex_id : TEXCOORD2;
        float v_flash_amount : TEXCOORD3;
    };

    struct SPIRV_Cross_Output
    {
        float4 col_out : SV_Target0;
    };

    void frag_main()
    {
        float4 tex_col = 1.0f.xxxx;
        if (((0.5f > v_tex_id) ? 0 : 1) == 0)
        {
            tex_col = tex0.Sample(default_sampler, uv);
            bool _45 = v_flash_amount == 1.0f;
            bool _55;
            if (_45)
            {
                _55 = tex_col.w > 0.0f;
            }
            else
            {
                _55 = _45;
            }
            bool _62;
            if (_55)
            {
                _62 = tex_col.w != 0.3529411852359771728515625f;
            }
            else
            {
                _62 = _55;
            }
            if (_62)
            {
                col_out = 1.0f.xxxx;
            }
            else
            {
                col_out = tex_col;
                col_out *= color;
            }
        }
        else
        {
            float4 _92 = tex_col;
            _92.w = tex1.Sample(default_sampler, uv).x;
            tex_col = _92;
            col_out = _92;
            col_out *= color;
        }
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        v_tex_id = stage_input.v_tex_id;
        uv = stage_input.uv;
        v_flash_amount = stage_input.v_flash_amount;
        color = stage_input.color;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.col_out = col_out;
        return stage_output;
    }
*/
@(private)
fs_source_hlsl5 := [1640]u8 {
	0x54,
	0x65,
	0x78,
	0x74,
	0x75,
	0x72,
	0x65,
	0x32,
	0x44,
	0x3c,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x3e,
	0x20,
	0x74,
	0x65,
	0x78,
	0x30,
	0x20,
	0x3a,
	0x20,
	0x72,
	0x65,
	0x67,
	0x69,
	0x73,
	0x74,
	0x65,
	0x72,
	0x28,
	0x74,
	0x30,
	0x29,
	0x3b,
	0x0a,
	0x53,
	0x61,
	0x6d,
	0x70,
	0x6c,
	0x65,
	0x72,
	0x53,
	0x74,
	0x61,
	0x74,
	0x65,
	0x20,
	0x64,
	0x65,
	0x66,
	0x61,
	0x75,
	0x6c,
	0x74,
	0x5f,
	0x73,
	0x61,
	0x6d,
	0x70,
	0x6c,
	0x65,
	0x72,
	0x20,
	0x3a,
	0x20,
	0x72,
	0x65,
	0x67,
	0x69,
	0x73,
	0x74,
	0x65,
	0x72,
	0x28,
	0x73,
	0x30,
	0x29,
	0x3b,
	0x0a,
	0x54,
	0x65,
	0x78,
	0x74,
	0x75,
	0x72,
	0x65,
	0x32,
	0x44,
	0x3c,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x3e,
	0x20,
	0x74,
	0x65,
	0x78,
	0x31,
	0x20,
	0x3a,
	0x20,
	0x72,
	0x65,
	0x67,
	0x69,
	0x73,
	0x74,
	0x65,
	0x72,
	0x28,
	0x74,
	0x31,
	0x29,
	0x3b,
	0x0a,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x32,
	0x20,
	0x75,
	0x76,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x3b,
	0x0a,
	0x73,
	0x74,
	0x61,
	0x74,
	0x69,
	0x63,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x3b,
	0x0a,
	0x0a,
	0x73,
	0x74,
	0x72,
	0x75,
	0x63,
	0x74,
	0x20,
	0x53,
	0x50,
	0x49,
	0x52,
	0x56,
	0x5f,
	0x43,
	0x72,
	0x6f,
	0x73,
	0x73,
	0x5f,
	0x49,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x0a,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x30,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x32,
	0x20,
	0x75,
	0x76,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x31,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x32,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x20,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x20,
	0x3a,
	0x20,
	0x54,
	0x45,
	0x58,
	0x43,
	0x4f,
	0x4f,
	0x52,
	0x44,
	0x33,
	0x3b,
	0x0a,
	0x7d,
	0x3b,
	0x0a,
	0x0a,
	0x73,
	0x74,
	0x72,
	0x75,
	0x63,
	0x74,
	0x20,
	0x53,
	0x50,
	0x49,
	0x52,
	0x56,
	0x5f,
	0x43,
	0x72,
	0x6f,
	0x73,
	0x73,
	0x5f,
	0x4f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x0a,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x3a,
	0x20,
	0x53,
	0x56,
	0x5f,
	0x54,
	0x61,
	0x72,
	0x67,
	0x65,
	0x74,
	0x30,
	0x3b,
	0x0a,
	0x7d,
	0x3b,
	0x0a,
	0x0a,
	0x76,
	0x6f,
	0x69,
	0x64,
	0x20,
	0x66,
	0x72,
	0x61,
	0x67,
	0x5f,
	0x6d,
	0x61,
	0x69,
	0x6e,
	0x28,
	0x29,
	0x0a,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x20,
	0x3d,
	0x20,
	0x31,
	0x2e,
	0x30,
	0x66,
	0x2e,
	0x78,
	0x78,
	0x78,
	0x78,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x69,
	0x66,
	0x20,
	0x28,
	0x28,
	0x28,
	0x30,
	0x2e,
	0x35,
	0x66,
	0x20,
	0x3e,
	0x20,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x29,
	0x20,
	0x3f,
	0x20,
	0x30,
	0x20,
	0x3a,
	0x20,
	0x31,
	0x29,
	0x20,
	0x3d,
	0x3d,
	0x20,
	0x30,
	0x29,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x30,
	0x2e,
	0x53,
	0x61,
	0x6d,
	0x70,
	0x6c,
	0x65,
	0x28,
	0x64,
	0x65,
	0x66,
	0x61,
	0x75,
	0x6c,
	0x74,
	0x5f,
	0x73,
	0x61,
	0x6d,
	0x70,
	0x6c,
	0x65,
	0x72,
	0x2c,
	0x20,
	0x75,
	0x76,
	0x29,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x62,
	0x6f,
	0x6f,
	0x6c,
	0x20,
	0x5f,
	0x34,
	0x35,
	0x20,
	0x3d,
	0x20,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x20,
	0x3d,
	0x3d,
	0x20,
	0x31,
	0x2e,
	0x30,
	0x66,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x62,
	0x6f,
	0x6f,
	0x6c,
	0x20,
	0x5f,
	0x35,
	0x35,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x69,
	0x66,
	0x20,
	0x28,
	0x5f,
	0x34,
	0x35,
	0x29,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x5f,
	0x35,
	0x35,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x2e,
	0x77,
	0x20,
	0x3e,
	0x20,
	0x30,
	0x2e,
	0x30,
	0x66,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x65,
	0x6c,
	0x73,
	0x65,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x5f,
	0x35,
	0x35,
	0x20,
	0x3d,
	0x20,
	0x5f,
	0x34,
	0x35,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x62,
	0x6f,
	0x6f,
	0x6c,
	0x20,
	0x5f,
	0x36,
	0x32,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x69,
	0x66,
	0x20,
	0x28,
	0x5f,
	0x35,
	0x35,
	0x29,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x5f,
	0x36,
	0x32,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x2e,
	0x77,
	0x20,
	0x21,
	0x3d,
	0x20,
	0x30,
	0x2e,
	0x33,
	0x35,
	0x32,
	0x39,
	0x34,
	0x31,
	0x31,
	0x38,
	0x35,
	0x32,
	0x33,
	0x35,
	0x39,
	0x37,
	0x37,
	0x31,
	0x37,
	0x32,
	0x38,
	0x35,
	0x31,
	0x35,
	0x36,
	0x32,
	0x35,
	0x66,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x65,
	0x6c,
	0x73,
	0x65,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x5f,
	0x36,
	0x32,
	0x20,
	0x3d,
	0x20,
	0x5f,
	0x35,
	0x35,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x69,
	0x66,
	0x20,
	0x28,
	0x5f,
	0x36,
	0x32,
	0x29,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x3d,
	0x20,
	0x31,
	0x2e,
	0x30,
	0x66,
	0x2e,
	0x78,
	0x78,
	0x78,
	0x78,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x65,
	0x6c,
	0x73,
	0x65,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x2a,
	0x3d,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x65,
	0x6c,
	0x73,
	0x65,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x6c,
	0x6f,
	0x61,
	0x74,
	0x34,
	0x20,
	0x5f,
	0x39,
	0x32,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x5f,
	0x39,
	0x32,
	0x2e,
	0x77,
	0x20,
	0x3d,
	0x20,
	0x74,
	0x65,
	0x78,
	0x31,
	0x2e,
	0x53,
	0x61,
	0x6d,
	0x70,
	0x6c,
	0x65,
	0x28,
	0x64,
	0x65,
	0x66,
	0x61,
	0x75,
	0x6c,
	0x74,
	0x5f,
	0x73,
	0x61,
	0x6d,
	0x70,
	0x6c,
	0x65,
	0x72,
	0x2c,
	0x20,
	0x75,
	0x76,
	0x29,
	0x2e,
	0x78,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x63,
	0x6f,
	0x6c,
	0x20,
	0x3d,
	0x20,
	0x5f,
	0x39,
	0x32,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x3d,
	0x20,
	0x5f,
	0x39,
	0x32,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x2a,
	0x3d,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x7d,
	0x0a,
	0x7d,
	0x0a,
	0x0a,
	0x53,
	0x50,
	0x49,
	0x52,
	0x56,
	0x5f,
	0x43,
	0x72,
	0x6f,
	0x73,
	0x73,
	0x5f,
	0x4f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x20,
	0x6d,
	0x61,
	0x69,
	0x6e,
	0x28,
	0x53,
	0x50,
	0x49,
	0x52,
	0x56,
	0x5f,
	0x43,
	0x72,
	0x6f,
	0x73,
	0x73,
	0x5f,
	0x49,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x69,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x29,
	0x0a,
	0x7b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x20,
	0x3d,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x69,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x76,
	0x5f,
	0x74,
	0x65,
	0x78,
	0x5f,
	0x69,
	0x64,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x75,
	0x76,
	0x20,
	0x3d,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x69,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x75,
	0x76,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x20,
	0x3d,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x69,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x76,
	0x5f,
	0x66,
	0x6c,
	0x61,
	0x73,
	0x68,
	0x5f,
	0x61,
	0x6d,
	0x6f,
	0x75,
	0x6e,
	0x74,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x20,
	0x3d,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x69,
	0x6e,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x63,
	0x6f,
	0x6c,
	0x6f,
	0x72,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x66,
	0x72,
	0x61,
	0x67,
	0x5f,
	0x6d,
	0x61,
	0x69,
	0x6e,
	0x28,
	0x29,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x53,
	0x50,
	0x49,
	0x52,
	0x56,
	0x5f,
	0x43,
	0x72,
	0x6f,
	0x73,
	0x73,
	0x5f,
	0x4f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x2e,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x20,
	0x3d,
	0x20,
	0x63,
	0x6f,
	0x6c,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x3b,
	0x0a,
	0x20,
	0x20,
	0x20,
	0x20,
	0x72,
	0x65,
	0x74,
	0x75,
	0x72,
	0x6e,
	0x20,
	0x73,
	0x74,
	0x61,
	0x67,
	0x65,
	0x5f,
	0x6f,
	0x75,
	0x74,
	0x70,
	0x75,
	0x74,
	0x3b,
	0x0a,
	0x7d,
	0x0a,
	0x00,
}
quad_shader_desc :: proc(backend: sg.Backend) -> sg.Shader_Desc {
	desc: sg.Shader_Desc
	desc.label = "quad_shader"
	#partial switch backend {
	case .GLES3:
		desc.vertex_func.source = transmute(cstring)&vs_source_glsl300es
		desc.vertex_func.entry = "main"
		desc.fragment_func.source = transmute(cstring)&fs_source_glsl300es
		desc.fragment_func.entry = "main"
		desc.attrs[0].glsl_name = "position"
		desc.attrs[1].glsl_name = "color0"
		desc.attrs[2].glsl_name = "uv0"
		desc.attrs[3].glsl_name = "tex_id"
		desc.attrs[4].glsl_name = "flash_amount"
		desc.images[0].stage = .FRAGMENT
		desc.images[0].multisampled = false
		desc.images[0].image_type = ._2D
		desc.images[0].sample_type = .FLOAT
		desc.images[1].stage = .FRAGMENT
		desc.images[1].multisampled = false
		desc.images[1].image_type = ._2D
		desc.images[1].sample_type = .FLOAT
		desc.samplers[0].stage = .FRAGMENT
		desc.samplers[0].sampler_type = .FILTERING
		desc.image_sampler_pairs[0].stage = .FRAGMENT
		desc.image_sampler_pairs[0].image_slot = 0
		desc.image_sampler_pairs[0].sampler_slot = 0
		desc.image_sampler_pairs[0].glsl_name = "tex0_default_sampler"
		desc.image_sampler_pairs[1].stage = .FRAGMENT
		desc.image_sampler_pairs[1].image_slot = 1
		desc.image_sampler_pairs[1].sampler_slot = 0
		desc.image_sampler_pairs[1].glsl_name = "tex1_default_sampler"
	case .D3D11:
		desc.vertex_func.source = transmute(cstring)&vs_source_hlsl5
		desc.vertex_func.d3d11_target = "vs_5_0"
		desc.vertex_func.entry = "main"
		desc.fragment_func.source = transmute(cstring)&fs_source_hlsl5
		desc.fragment_func.d3d11_target = "ps_5_0"
		desc.fragment_func.entry = "main"
		desc.attrs[0].hlsl_sem_name = "TEXCOORD"
		desc.attrs[0].hlsl_sem_index = 0
		desc.attrs[1].hlsl_sem_name = "TEXCOORD"
		desc.attrs[1].hlsl_sem_index = 1
		desc.attrs[2].hlsl_sem_name = "TEXCOORD"
		desc.attrs[2].hlsl_sem_index = 2
		desc.attrs[3].hlsl_sem_name = "TEXCOORD"
		desc.attrs[3].hlsl_sem_index = 3
		desc.attrs[4].hlsl_sem_name = "TEXCOORD"
		desc.attrs[4].hlsl_sem_index = 4
		desc.images[0].stage = .FRAGMENT
		desc.images[0].multisampled = false
		desc.images[0].image_type = ._2D
		desc.images[0].sample_type = .FLOAT
		desc.images[0].hlsl_register_t_n = 0
		desc.images[1].stage = .FRAGMENT
		desc.images[1].multisampled = false
		desc.images[1].image_type = ._2D
		desc.images[1].sample_type = .FLOAT
		desc.images[1].hlsl_register_t_n = 1
		desc.samplers[0].stage = .FRAGMENT
		desc.samplers[0].sampler_type = .FILTERING
		desc.samplers[0].hlsl_register_s_n = 0
		desc.image_sampler_pairs[0].stage = .FRAGMENT
		desc.image_sampler_pairs[0].image_slot = 0
		desc.image_sampler_pairs[0].sampler_slot = 0
		desc.image_sampler_pairs[1].stage = .FRAGMENT
		desc.image_sampler_pairs[1].image_slot = 1
		desc.image_sampler_pairs[1].sampler_slot = 0
	}
	return desc
}
